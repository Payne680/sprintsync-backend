name: Performance Testing

on:
  schedule:
    - cron: "0 3 * * 0" # Weekly on Sunday at 3 AM
  workflow_dispatch:
  push:
    branches: [main]
    paths:
      - "src/**"

jobs:
  load-test:
    name: Load Testing
    runs-on: ubuntu-latest

    services:
      postgres:
        image: postgres:15-alpine
        env:
          POSTGRES_PASSWORD: test_password
          POSTGRES_USER: test_user
          POSTGRES_DB: sprintsync_perf
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "18"
          cache: "npm"

      - name: Install dependencies
        run: npm ci

      - name: Setup database
        run: |
          npx prisma generate
          npx prisma migrate deploy
          npm run db:seed
        env:
          DATABASE_URL: postgresql://test_user:test_password@localhost:5432/sprintsync_perf

      - name: Start application
        run: |
          npm start &
          sleep 10
        env:
          DATABASE_URL: postgresql://test_user:test_password@localhost:5432/sprintsync_perf
          JWT_SECRET: test-jwt-secret-for-perf
          NODE_ENV: test
          PORT: 3000

      - name: Install Artillery and dependencies
        run: |
          npm install -g artillery@latest
          sudo apt-get update
          sudo apt-get install -y jq bc

      - name: Run load tests
        run: |
          # Create Artillery test configuration
          cat > artillery-config.yml << EOF
          config:
            target: 'http://localhost:3000'
            phases:
              - duration: 60
                arrivalRate: 10
                name: "Warm up"
              - duration: 120
                arrivalRate: 50
                name: "Load test"
              - duration: 60
                arrivalRate: 100
                name: "Stress test"
            payload:
              path: "test-users.csv"
              fields:
                - "email"
                - "password"
          scenarios:
            - name: "Authentication flow"
              weight: 30
              flow:
                - post:
                    url: "/auth/signup"
                    json:
                      name: "Load Test User"
                      email: "{{ email }}"
                      password: "{{ password }}"
                - post:
                    url: "/auth/login"
                    json:
                      email: "{{ email }}"
                      password: "{{ password }}"
                    capture:
                      - json: "$.token"
                        as: "token"
            - name: "Task operations"
              weight: 70
              flow:
                - post:
                    url: "/auth/login"
                    json:
                      email: "demo@sprintsync.com"
                      password: "demo123"
                    capture:
                      - json: "$.token"
                        as: "token"
                - get:
                    url: "/tasks"
                    headers:
                      Authorization: "Bearer {{ token }}"
                - post:
                    url: "/tasks"
                    headers:
                      Authorization: "Bearer {{ token }}"
                    json:
                      title: "Load test task {{ \$randomString() }}"
                      description: "Generated during load testing"
          EOF

          # Create test users CSV
          cat > test-users.csv << EOF
          email,password
          loadtest1@example.com,password123
          loadtest2@example.com,password123
          loadtest3@example.com,password123
          EOF

          # Run the load test
          artillery run artillery-config.yml --output report.json

      - name: Generate HTML report
        run: artillery report report.json --output report.html

      - name: Upload performance results
        uses: actions/upload-artifact@v4
        with:
          name: performance-results
          path: |
            report.json
            report.html

      - name: Check performance thresholds
        run: |
          # Extract key metrics and check thresholds
          echo "Analyzing performance results..."

          # Example threshold checks (customize based on your requirements)
          avg_response_time=$(cat report.json | jq '.aggregate.latency.mean')
          p95_response_time=$(cat report.json | jq '.aggregate.latency.p95')
          error_rate=$(cat report.json | jq '.aggregate.counters."http.codes.4xx" // 0')

          echo "Average response time: ${avg_response_time}ms"
          echo "95th percentile response time: ${p95_response_time}ms"
          echo "Error count: ${error_rate}"

          # Fail if thresholds are exceeded
          if (( $(echo "$avg_response_time > 500" | bc -l) )); then
            echo "❌ Average response time exceeded threshold (500ms)"
            exit 1
          fi

          if (( $(echo "$p95_response_time > 1000" | bc -l) )); then
            echo "❌ 95th percentile response time exceeded threshold (1000ms)"
            exit 1
          fi

          if (( error_rate > 10 )); then
            echo "❌ Error rate exceeded threshold (10 errors)"
            exit 1
          fi

          echo "✅ All performance thresholds passed"
