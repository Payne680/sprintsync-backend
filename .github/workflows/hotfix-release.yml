name: Hotfix Release

on:
  push:
    branches:
      - main

jobs:
  create-hotfix-release:
    name: Create Hotfix Release
    runs-on: ubuntu-latest
    outputs:
      release_version: ${{ steps.set_version.outputs.release_version }}

    steps:
      - name: Checkout main
        uses: actions/checkout@v4
        with:
          ref: main

      - name: Get current version
        id: get_version
        run: |
          # Get version from package.json instead of VERSION file
          if [ -f package.json ]; then
            echo "version=$(node -p "require('./package.json').version")" >> $GITHUB_OUTPUT
          else
            # Fallback to git tags if package.json doesn't exist
            VERSION=$(git describe --tags --abbrev=0 2>/dev/null || echo "0.0.0")
            echo "version=${VERSION#v}" >> $GITHUB_OUTPUT
          fi

      - name: Increment patch version
        id: set_version
        run: |
          VERSION="${{ steps.get_version.outputs.version }}"
          IFS='.' read -ra ADDR <<< "$VERSION"
          MAJOR=${ADDR[0]:-0}
          MINOR=${ADDR[1]:-0}
          PATCH=${ADDR[2]:-0}
          NEW_PATCH=$((PATCH + 1))
          NEW_VERSION="$MAJOR.$MINOR.$NEW_PATCH"
          echo "release_version=$NEW_VERSION" >> $GITHUB_OUTPUT

          # Update package.json version if it exists
          if [ -f package.json ]; then
            npm version $NEW_VERSION --no-git-tag-version
          fi

      - name: Commit version bump
        run: |
          git config --local user.email "actions@github.com"
          git config --local user.name "GitHub Actions"
          if [ -f package.json ]; then
            git add package.json
            git commit -m "Bump hotfix version to v${{ steps.set_version.outputs.release_version }}"
          else
            echo "No package.json to commit, proceeding with tag creation"
          fi
          git push

      - name: Create hotfix branch
        run: |
          git checkout -b hotfix/v${{ steps.set_version.outputs.release_version }}
          git push origin hotfix/v${{ steps.set_version.outputs.release_version }}

      - name: Create hotfix release tag
        run: |
          git tag v${{ steps.set_version.outputs.release_version }}
          git push origin v${{ steps.set_version.outputs.release_version }}

  build-hotfix:
    name: Build Hotfix Release
    runs-on: ubuntu-latest
    needs: create-hotfix-release

    steps:
      - name: Checkout release
        uses: actions/checkout@v4
        with:
          ref: v${{ needs.create-hotfix-release.outputs.release_version }}

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Build and push hotfix image
        uses: docker/build-push-action@v5
        with:
          context: .
          platforms: linux/amd64,linux/arm64
          push: true
          tags: |
            ${{ secrets.DOCKER_USERNAME }}/sprintsync-api:v${{ needs.create-hotfix-release.outputs.release_version }}
            ${{ secrets.DOCKER_USERNAME }}/sprintsync-api:latest-hotfix
          labels: |
            org.opencontainers.image.title=SprintSync API (Hotfix)
            org.opencontainers.image.version=v${{ needs.create-hotfix-release.outputs.release_version }}
            org.opencontainers.image.description=Critical hotfix release

  merge-hotfix:
    name: Merge Hotfix to Main
    runs-on: ubuntu-latest
    needs: [create-hotfix-release, build-hotfix]

    steps:
      - name: Checkout main
        uses: actions/checkout@v4
        with:
          ref: main

      - name: Merge hotfix branch
        run: |
          git config --local user.email "actions@github.com"
          git config --local user.name "GitHub Actions"
          git merge --no-ff hotfix/v${{ needs.create-hotfix-release.outputs.release_version }} -m "Merge hotfix v${{ needs.create-hotfix-release.outputs.release_version }}"
          git push

  cleanup-hotfix:
    name: Cleanup Hotfix Branch
    runs-on: ubuntu-latest
    needs: [create-hotfix-release, build-hotfix]
    if: success()

    steps:
      - name: Delete hotfix branch
        run: |
          git push origin --delete hotfix/v${{ needs.create-hotfix-release.outputs.release_version }}
