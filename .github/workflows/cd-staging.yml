name: CD - Monitor Staging Deployment

on:
  push:
    branches: [dev]
  workflow_dispatch:

jobs:
  monitor-staging-deployment:
    name: Monitor Staging Auto-Deployment
    runs-on: ubuntu-latest
    env:
      NODE_VERSION: "18"

    services:
      postgres:
        image: postgres:15-alpine
        env:
          POSTGRES_PASSWORD: test_password
          POSTGRES_USER: test_user
          POSTGRES_DB: sprintsync_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Run pre-deployment tests
        run: |
          # Quick validation before monitoring deployment
          echo "🧪 Running quick validation..."
          npm ci
          npm run lint
          npm test
        env:
          DATABASE_URL: postgresql://test_user:test_password@localhost:5432/sprintsync_test
          JWT_SECRET: test-jwt-secret-for-staging
          NODE_ENV: test

      - name: Wait for Render staging deployment
        run: |
          echo "🚀 Render auto-deployment triggered by push to develop"
          echo "⏳ Waiting for staging deployment to complete..."
          sleep 90

      - name: Monitor staging health
        run: |
          echo "🔍 Monitoring staging deployment..."

          for i in {1..15}; do
            echo "Staging health check attempt $i/15..."
            
            if curl -f "${{ secrets.STAGING_APP_URL }}/health" --max-time 10; then
              echo "✅ Staging deployment is healthy"
              break
            else
              echo "⏳ Staging deployment in progress, waiting 20 seconds..."
              if [ $i -eq 15 ]; then
                echo "❌ Staging health check timeout"
                exit 1
              fi
              sleep 20
            fi
          done

      - name: Run staging smoke tests
        run: |
          echo "🧪 Running staging smoke tests..."

          # Test critical endpoints
          curl -f "${{ secrets.STAGING_APP_URL }}/health" || exit 1
          curl -f "${{ secrets.STAGING_APP_URL }}/docs" || exit 1

          echo "✅ Staging smoke tests passed"
