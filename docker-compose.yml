version: "3.8"

services:
  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    container_name: sprintsync-db
    restart: unless-stopped
    environment:
      POSTGRES_DB: ${POSTGRES_DB:-sprintsync}
      POSTGRES_USER: ${POSTGRES_USER:-sprintsync_user}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-sprintsync_password}
    ports:
      - "${POSTGRES_PORT:-5432}:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./scripts/init-db.sql:/docker-entrypoint-initdb.d/init-db.sql:ro
    healthcheck:
      test:
        [
          "CMD-SHELL",
          "pg_isready -U ${POSTGRES_USER:-sprintsync_user} -d ${POSTGRES_DB:-sprintsync}",
        ]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 10s
    networks:
      - sprintsync-network

  # SprintSync API
  api:
    build:
      context: .
      target: production
    container_name: sprintsync-api
    restart: unless-stopped
    environment:
      NODE_ENV: ${NODE_ENV:-production}
      PORT: ${PORT:-3000}
      DATABASE_URL: postgresql://${POSTGRES_USER:-sprintsync_user}:${POSTGRES_PASSWORD:-sprintsync_password}@postgres:5432/${POSTGRES_DB:-sprintsync}
      JWT_SECRET: ${JWT_SECRET}
      JWT_EXPIRES_IN: ${JWT_EXPIRES_IN:-7d}
      LOG_LEVEL: ${LOG_LEVEL:-info}
    ports:
      - "${API_PORT:-3000}:3000"
    depends_on:
      postgres:
        condition: service_healthy
    volumes:
      - ./logs:/app/logs
      - /app/node_modules # Anonymous volume to prevent overwriting
    command: >
      sh -c "
        echo 'Waiting for database...' &&
        npx prisma migrate deploy &&
        echo 'Database migrations completed' &&
        npm start
      "
    healthcheck:
      test:
        [
          "CMD",
          "node",
          "-e",
          "require('http').get('http://localhost:3000/health', (res) => { process.exit(res.statusCode === 200 ? 0 : 1) })",
        ]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s
    networks:
      - sprintsync-network

volumes:
  postgres_data:
    driver: local

networks:
  sprintsync-network:
    driver: bridge
